                                      INTRODUCTION TO LINEAR REGRESSION
GIVEN:
# Load libraries
import codecademylib3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Read in the data
students = pd.read_csv('test_data.csv')
# Write equation for a line
y = 9.85 * students.hours_studied + 43
# Create the plot here: 
#plt.plot(students.hours_studied, y)
plt.show()
  1. A dataset has been loaded for you in script.py containing fictional data from a group of students who were surveyed about their studying and breakfast choices prior to a math test.
The data is loaded as a variable named students. Create a scatter plot with hours_studied on the x-axis and score on the y-axis. Note that the code to show the plot (plt.show()) is 
already provided for you, so you do not need to add it!
//
hours_studied = plt.scatter(students.hours_studied, students.score)
plt.show()                                                          RESULT: Scattered plot with hours_studied data on the x axis and scores on the y. 
  2. If you had to draw a line on top of this plot to describe the relationship between hours studied and math score, what would that line look like? Uncomment the code for the line 
plot (plt.plot(students.hours_studied, y)). Does this line look correct?
//
# Create the plot here: 
hours_studied = plt.scatter(students.hours_studied, students.score)
plt.plot(students.hours_studied, y)
plt.show()                                                          RESULT: The same scattered plot with a line corresponding to a relationship between studied hours and test scores. 

                                      EQUATION OF A LINE
  3. In script.py, we’ve again plotted score (as the y-variable) against hours_studied (the x-variable), with a line going through the points. Let’s see if we can improve this line 
so that it better fits the data. To start, the line appears to be too steep. In script.py, edit the equation of the line so that the slope is 10, then press “Run” to see the new line.
This should make the line less steep (because we are decreasing the slope). Does this fit the data better or worse?
//
predicted_score = 10 * students.hours_studied + 20                  RESULT: The slope looks much better suited for the scatters in the plot. 
  4. The line now appears to be parallel to the points but still sits below them! Leaving the slope of the line equal to 10, edit the equation of the line so that the y-intercept 
is 45, then press “Run” to see the new line. This should move the line upward (because we are increasing the y-intercept). Does this new line fit the data well?
//
predicted_score = 10 * students.hours_studied + 45                  RESULT: The line completely corresponds to the scattered plot and visually seen relationship. 

                                      FITTING A LINEAR REGRESSION MODEL IN PYTHON
GIVEN:
# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Read in the data
students = pd.read_csv('test_data.csv')
  5. Using the students dataset that has been loaded in script.py, create a linear regression model that predicts student score using hours_studied as a predictor and save the result 
as a variable named model.
print(students.head())                                              RESULT:
                                                                       score  hours_studied  breakfast
                                                                    0   73.5            2.7          0
                                                                    1   92.2            4.1          1
                                                                    2   55.4            2.5          0
                                                                    3   64.6            1.6          1
                                                                    4   66.9            1.4          0
//
# Create the model here:
model = sm.OLS.from_formula('score ~ hours_studied', data = students)
  6. Fit the model using the .fit() method on model (created in the previous step), and save the fitted model as results.
//
results = model.fit()
  7. Print out the model coefficients using .params.
//
To print out the coefficients of a fitted model named body_model_results, we would use the following line of code:
print(body_model_results.params)                                    RESULT: Intercept        43.016014
                                                                            hours_studied     9.848111
                                                                            dtype: float64

                                      USING A REGRESSION MODEL FOR PREDICTION
GIVEN:
# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Read in the data
students = pd.read_csv('test_data.csv')
print(students.head())                                              RESULT:
                                                                       score  hours_studied  breakfast
                                                                    0   73.5            2.7          0
                                                                    1   92.2            4.1          1
                                                                    2   55.4            2.5          0
                                                                    3   64.6            1.6          1
                                                                    4   66.9            1.4          0
# Fit the model
model = sm.OLS.from_formula('score ~ hours_studied', students)
results = model.fit()
  8. In script.py, you’ll see the code (from the previous exercise) to fit a model that predicts test score using hours_studied. Print the coefficients of this model using .params.
//
print(results.params)                                               RESULT: Intercept        43.016014
                                                                            hours_studied     9.848111
                                                                            dtype: float64
  9. Using your model, what is the predicted score for a student who spent 3 hours studying? Save the result as pred_3hr and print it out. Calculate your answer by plugging into 
the formula for a line (instead of using .predict()).
//
pred_3hr = results.params[1]*3 + results.params[0]
print(pred_3hr)                                                     RESULT: 72.56034698735526
  10. What is the predicted score for a student who spent 5 hours studying? Use the .predict() method to calculate your answer and save it as pred_5hr, then print it out.
//
newdata = {"hours_studied":[5]}
pred_5hr = results.predict(newdata)
print(pred_5hr)                                                     RESULT: 0    92.256569

                                      INTERPRETING A REGRESSION MODEL
  11. Checkpoint: The intercept for the OLS regression model predicting score based on hours_studied is 43. In interpretations.txt give a one-sentence interpretation of the intercept 
for this model. Does this intercept make sense in real life? Click Run after you’ve written your interpretation.
//
People who didn't study / studied 0 hours for the test would score 43 points.
  12. The slope for the OLS regression model predicting score based on hours_studied is 9.8. In interpretations.txt give a one-sentence interpretation of the slope for this model.
Click Run after you’ve written your interpretation.
//
One additional studied hour gives the chance of scorig 9.8 points higher.

                                      ASSUMPTIONS ON LINEAR REGRESSION PART I
GIVEN:
# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Read in the data
students = pd.read_csv('test_data.csv')
# Fit the model
model = sm.OLS.from_formula('score ~ hours_studied', students)
results = model.fit()
  13. script.py already contains the code to fit a model on the students dataset that predicts test score using hours_studied as a predictor. Calculate the fitted values for this 
model and save them as fitted_values.
//
fitted_values = results.predict(students)
print(fitted_values.head())                                           RESULT:
                                                                      0    69.605914
                                                                      1    83.393269
                                                                      2    67.636291
                                                                      3    58.772991
                                                                      4    56.803369
  14. Calculate the residuals for this model and save the result as residuals.
  15. Print out the first 5 values in residuals and inspect them. Can you make sense of these numbers? What is the difference between a positive and negative residual?
//
residuals = students.score - fitted_values
print(residuals.head())                                               RESULT:
                                                                      0     3.894086
                                                                      1     8.806731
                                                                      2   -12.236291
                                                                      3     5.827009
                                                                      4    10.096631

                                      ASSUMPTIONS ON LINEAR REGRESSION PART II
GIVEN:
# Load libraries
import codecademylib3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Read in the data
students = pd.read_csv('test_data.csv')
# Fit the model
model = sm.OLS.from_formula('score ~ hours_studied', students)
results = model.fit()
# Calculate fitted values
fitted_values = results.predict(students)
# Calculate residuals
residuals = students.score - fitted_values
# Plot a histogram of the residuals here:
plt.show()
plt.clf()
# Plot the residuals against the fitted vals here:
plt.show()
  16. Your code to calculate the residuals and fitted values for the model of score predicted by hours studied is provided for you in script.py. Plot a histogram of the residuals 
to check the normality assumption. Is this assumption met?
//
plt.hist(residuals)
plt.show()                                               RESULT: Histogram looks normally distributed.
plt.clf()
  17. Now, check the homoscedasticity assumption by plotting the residuals against the fitted values (fitted_values on the x-axis and residuals on the y-axis). Is this assumption met?
//
plt.scatter(fitted_values, residuals)
plt.show()                                               RESULT: Yes. The residuals' scatters in the diagramn are normally and homogenous distributed around 0 for the fitted_values 
                                                                 and along all of them. No pattern exist.

                                      CATEGORICAL PREDICTORS
GIVEN:
# Load libraries
import codecademylib3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Read in the data
students = pd.read_csv('test_data.csv')
# Calculate group means
print(students.groupby('breakfast').mean().score)       RESULT:
                                                        	score
                                                        0	61.66415094339621
                                                        1	73.7212765957447
# Create the scatter plot here:
# Add the additional line here:
# Show the plot
plt.show()
  18. Using the dataset students (which has been loaded for you in script.py), plot a scatter plot of score (y-axis) against breakfast (x-axis) to see scores for students who did and 
did not eat breakfast.
//
plt.scatter(students.breakfast, students.score)
plt.show()
  19. Code has been provided for you in script.py to calculate the mean test score for students who ate breakfast and the mean score for students who did not eat breakfast. Use these 
numbers to plot the best-fit line on top of the scatter plot.
//
# Add the additional line here:
plt.plot([0,1],[61.66415094339621, 73.7212765957447], color='r')
# Show the plot
plt.show()

                                      CATEGORICAL PREDICTORS: FIT AND INTERPRETATION
GIVEN:
# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Read in the data
students = pd.read_csv('test_data.csv')
# Calculate and print group means
mean_score_no_breakfast = np.mean(students.score[students.breakfast == 0])
mean_score_breakfast = np.mean(students.score[students.breakfast == 1])
print('Mean score (no breakfast): ', mean_score_no_breakfast)                      RESULT: Mean score (no breakfast):  61.664150943396216
print('Mean score (breakfast): ', mean_score_breakfast)                            RESULT: Mean score (breakfast):  73.72127659574468
  20. The students dataset has been loaded for you in script.py. Create and fit a regression model of score predicted by breakfast using sm.OLS.from_formula() and print out 
the coefficients.
//
model = sm.OLS.from_formula('score ~ breakfast', students)
results = model.fit()                  
print(results.params)                                                              RESULT: Intercept    61.664151
                                                                                           breakfast    12.057126
                                                                                           dtype: float64
  21. Code has been provided for you in script.py to calculate the mean test score for students who ate breakfast (saved as mean_score_breakfast) and the mean score for students 
who did not eat breakfast (saved as mean_score_no_breakfast). Calculate and print the difference in mean scores. Can you find how this number relates to the regression output?
//
print(mean_score_breakfast-mean_score_no_breakfast)                                RESULT: 12.057125652348468

                                      REVIEW
  1. 


