                                      RANDOM SAMPLING IN PYTHON
GIVEN:
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import codecademylib3

population = pd.read_csv("salmon_population.csv")
population = np.array(population.Salmon_Weight)
pop_mean = round(np.mean(population),3)

## Plotting the Population Distribution
sns.histplot(population, stat='density')
plt.axvline(pop_mean,color='r',linestyle='dashed')
plt.title(f"Population Mean: {pop_mean}")
plt.xlabel("Weight (lbs)")
plt.show()
plt.clf() # close this plot

samp_size = 30
# Generate our random sample below
sample = np.random.choice(np.array(population), samp_size, replace = False)
  1. Find the mean of the sample, round it to 3 decimal places, and assign it to a variable called sample_mean.
//
sample_mean = round(np.mean(sample),3)
  2. Plot the histogram of the sample data.
//
sns.histplot(sample, stat='density')
plt.axvline(sample_mean,color='r',linestyle='dashed')
plt.title(F"Sample Mean: {sample_mean}")
plt.xlabel("Weight (lbs)")
plt.show()
  3. Change the sample size to 10. Does the mean change more or less each time you run it with a smaller sample size?
//
samp_size = 10

                                      SAMPLING DISTRIBUTIONS
GIVEN:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import codecademylib3
population = pd.read_csv("cod_population.csv")
# Save transaction times to a separate numpy array
population = population['Cod_Weight']
sample_size = 50
sample_means = []
for i in range(500):
  # calculate mean here
  # append here
  sample_means.append(this_sample_mean)
sns.histplot(sample_means,stat='density')
plt.title("Sampling Distribution of the Mean")
plt.xlabel("Weight (lbs)")
plt.show()
  4. Let’s estimate the sampling distribution of the mean using a population of cod fish. As we did with salmon fish, we will pretend we are all-knowing and have captured weight data on 
every cod fish in the ocean. In the workspace, we’ve loaded in the cod weight data. We’ve set the sample size equal to 50 and created a for loop to take 500 random samples. Inside the 
for loop, use the function np.mean() to calculate the mean of each sample. Save this to a variable called this_sample_mean. Then, still inside the for loop, append this_sample_mean to 
the list sample_means and run the simulation.
//
for i in range(500):
  samp = np.random.choice(population, sample_size, replace = False)
  # calculate mean here
  this_sample_mean = np.mean(samp)
  # append here
  sample_means.append(this_sample_mean)

                                      CENTRAL LIMIT THEOREM
  5. In order to see the Central Limit Theorem in action, let’s look at another population of fish that is not normally distributed. We have loaded this data on the weight of cod fish into 
the workspace. Uncomment the three lines underneath ## Checkpoint 1 to see the plot of the distribution of cod fish. Note the distribution.
//
sns.histplot(population, stat = 'density' )
plt.title("Population Distribution")
plt.show()
sample_means = []
# Below is our sample size
samp_size = 6
for i in range(500):
    samp = np.random.choice(population, samp_size, replace = False)
    this_sample_mean = np.mean(samp)
    sample_means.append(this_sample_mean)
  6. Now that we have seen the skewed population distribution, let’s simulate a sampling distribution of the mean. According to the CLT, we will see a normal distribution once the sampling 
size is large enough. To start, we have set the sample size to 6. Uncomment the five lines at the very bottom, run the code once, and take a look at the sampling distribution. Remember 
to scroll down to see the second plot.
//
plt.clf() # this closes the previous plot
sns.histplot(sample_means, stat = 'density' )
plt.title("Sampling Distribution of the Mean")
plt.xlabel("Weight (lbs)")
plt.show()
  7. Now change the sample size to 50 and run the code. Does the estimated sampling distribution look more normal now?
//
samp_size = 50
                                      CLT CONTINUED
  8. In the workspace, we’ve set up a simulation of a population that has a mean of 10 and a standard deviation of 10. We’ve set a sample size of 50. According to the CLT, we should 
have a sampling distribution of the mean that is normally distributed and has a mean that is close to the population mean. Run the code once. Does what you see align with the CLT?
Make sure to scroll down in the web browser to see the sampling distribution of the mean.
//
Yes, it does align with the CLT as sampling distribution mean is close to the population mean.
  9. Set variable samp_size equal to 6 and run the code. Why do you think the CLT applies here, even with a smaller sample size?
//
samp_size = 6. As the population is noramlly distributes the sampling distribution appears normal even with a smaller sample size. And the its mean is still close to the population mean. 

                                      STANDARD ERROR
  10. In the workspace, you can see a population distribution and a sampling distribution (scroll down to see the sampling distribution). Right now, the sample size is set to 10. Increase 
the sample size to 50 and note the change in the shape of the sampling distribution. A smaller standard error means that the distribution will be taller & skinnier. Is that the case?
Remember to scroll down to see the 2nd plot after you hit run.
//
samp_size = 50. Yes, that was the case - the distribution is thinner and taller.
  11. Now increase the standard deviation of the population to 30. This means that the population distribution will have more variation (and will therefore appear wider and flatter). 
The sampling distribution will also become wider and flatter because the standard error will increase (due to the larger numerator). Does what you see line up with what you expect?
//
population_std_dev = 30. Yes, the distribution appears wider and flatter as there is more place for variation.

                                      BIASED ESTIMATORS
  12. In the workspace, you can see the sampling distribution of the maximum. The mean of the distribution is not equal to the maximum of the population, showing that it is a biased 
estimator. Let’s look at another example. Edit the function app_statistic() so that it returns the variance using the NumPy function np.var(). (You can change the string as well to 
update the title of your plots.) Based on the resulting mean of the sampling distribution, would you say that variance is a biased or unbiased estimator?
//
app_stat_text = "Variance"
def app_statistic(x):
    return np.var(x)
  13. Change the statistic to mean using the np.mean() NumPy function. Does what you see correspond with what we know about biased and unbiased estimators? Feel free to try out other 
statistics in the app_statistic() function!
//
app_stat_text = "Mean"
def app_statistic(x):
    return np.mean(x)      The mean of the sampling distribution is more or less equal to the population mean.

                                      CALCULATING PROBABILITIES
  14. Let’s calculate the same probability for our cod fish population. We know that cod have an average weight of 36 lbs with a standard deviation of 20. We want to try to fit 25 cod 
fish into our same crate that can hold up to 750 lbs. Our first step is to calculate the standard error for a sample size of 25. Using the above information, calculate the standard error 
and assign it to a variable called standard_error.
//
std_dev = 20
samp_size = 25
standard_error = std_dev / (samp_size**.5)
  15. Awesome! Now that we have our standard error, we can use the normal CDF to calculate the probability that a sample of 25 fish has a mean weight of 30 lbs. Using the function 
stats.norm.cdf(), calculate this probability and assign it to a variable cod_cdf.
//
std_dev = 20
samp_size = 25
standard_error = std_dev / (samp_size**.5)
mean = 36
x = 750 / samp_size
cod_cdf = stats.norm.cdf(x, mean, standard_error)
print(cod_cdf)                                      RESULT: 0.06680720126885807
  16. Given the probability you calculated in the last checkpoint, would you recommend trying to carry 25 cod in the crate?
//
No. The probability of catching cod fishes with the average weight of 30pounds or less to fit them all in the 750 carrying bag is only ~7%.

                                      REVIEW
GIVEN:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import codecademylib3
# Set up parameters here:
x = None
population_mean = None
population_std_dev = None
samp_size = None
### Below is code to create simulated dataset and calculate Standard Error
standard_error = population_std_dev / (samp_size**.5)
this_cdf = round(stats.norm.cdf(x,population_mean,standard_error),3)
# Create the population
population = np.random.normal(population_mean, population_std_dev, size = 100000)
# Simulate the sampling distribution
sample_means = []
for i in range(500):
    samp = np.random.choice(population, samp_size, replace = False)
    sample_means.append(np.mean(samp))
mean_sampling_distribution = round(np.mean(sample_means),3)
std_sampling_distribution = round(np.std(sample_means),3)
std_error = population_std_dev / (samp_size **0.5)
sns.histplot(population, stat = 'density')
plt.title(f"Population Mean: {population_mean} \n Population Std Dev: {population_std_dev} \n Standard Error = {population_std_dev} / sq rt({samp_size}) \n Standard Error = {std_error} ")
plt.xlabel("")
plt.show()
plt.clf()
# Plot the sampling distribution
sns.histplot(sample_means, stat = 'density')
plt.axvline(x,color='r',linestyle='dashed')
plt.title(f"Sampling Dist Mean: {mean_sampling_distribution} \n Sampling Dist Standard Deviation: {std_sampling_distribution}\n CDF for x={x}: {this_cdf}")
plt.xlabel("")
plt.show()
  1. Let’s say we weigh all their burgers that they cook for dinner on a given night. 64 people order quarter-pounders. What is the probability that the mean will be 0.24 lbs or less?
Set up the parameters at the top of the code by filling in values for x, population_mean, population_std_dev, and samp_size.
//
x = 0.24
population_mean = 0.25
population_std_dev = 0.2
samp_size = 64
  2. Hit Run. The CDF is printed in the title of the 2nd plot. Take a mental note of the probability of 64 burgers having a mean of 0.24 lbs or less. 
// 
Hit.                                RESULT: CDF for x=0.24: 0.345
  3. Set the sample size in the simulator to 10 and consider the standard error. Has it changed in the direction you expected?
  4. Let’s say your family went to the restaurant and all 5 of you ordered the burger. What is the probability that you receive burgers with an average weight of 0.24 lbs or less?
//
x = 0.24
population_mean = 0.25
population_std_dev = 0.2
samp_size = 10                      RESULT: CDF for x=0.24: 0.437

