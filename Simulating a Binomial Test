                                      INTRODUCTION
GIVEN:
import pandas as pd
import codecademylib3
monthly_report = pd.read_csv('monthly_report.csv')
  1. The next few exercises will walk through the process of using a binomial test to analyze data from a hypothetical online company, Live-it-LIVE.com — a website that sells all 
the necessary props and costumes to recreate iconic movie scenes at home! The data we’ll be working with has been loaded for you in the workspace and saved as an object named monthly_report. 
Print monthly_report so that you can inspect it in the web browser. Note that the purchase column tells us whether a purchase was made; if so, the item that was purchased is listed in 
the item column. Feel free to scroll through the data so you can inspect more of the items!
//
print(monthly_report.head())                                          RESULT:
                                                                      timestamp	              purchase	item
                                                                    0	2020-01-17   17:23:06	  y	        cue cards - love actually
                                                                    1	2020-01-25   17:09:39	  n	        nan
                                                                    2	2020-01-25   05:22:01	  n	        nan
                                                                    3	2020-01-18   04:33:40	  y	        t-rex - jurassic park
                                                                    4	2020-01-24   17:24:52	  n	        nan

                                      SUMMARIZING THE SAMPLE
  2. Each row of the dataset monthly_report represents a single visitor to Live-it-LIVE.com during the month in question. Use .head() to print the first five rows of the data once again 
and inspect the 'purchase' column. What are the values and how can you tell whether someone made a purchase? Note that this will print in both the output terminal and the web browser, 
but it will look nicer and be easier to read in the web browser.
//
print(monthly_report.head())                                          RESULT:
                                                                      timestamp	              purchase	item
                                                                    0	2020-01-17   17:23:06	  y	        cue cards - love actually
                                                                    1	2020-01-25   17:09:39	  n	        nan
                                                                    2	2020-01-25   05:22:01	  n	        nan
                                                                    3	2020-01-18   04:33:40	  y        	t-rex - jurassic park
                                                                    4	2020-01-24   17:24:52	  n        	nan
  3. Calculate the sample size and assign it to a variable named sample_size. Print sample_size. How many visitors accessed the website this month?
//
sample_size = len(monthly_report)
print(sample_size)                                                  RESULT: 500
  4. Calculate the number of visitors who made a purchase this month and save it to a variable named num_purchased. Print num_purchased. How many visitors made a purchase this month?
Note that this will print to the output terminal, not the web browser.
//
num_purchased = np.sum(monthly_report.purchase == 'y')
print(num_purchased)                                                RESULT: 41

                                      SIMULATING RANDOMNESS
  5. In script.py, use the random.choice() function from NumPy to simulate a single visitor to Live-it-LIVE.com, who has a 10% chance of making a purchase (p=0.1). Save the outcome as 
a variable named one_visitor and print it. If the visitor made a purchase, the value of one_visitor should be ['y']; if they did not make a purchase, it should be ['n'] (just like in 
the original data!). Did that one simulated visitor make a purchase? Try pressing “Run” a few more times and see if you ever observe a different outcome. (Note that you’ll see an error 
for the next checkpoint if you press run a few times; don’t worry about that!).
//
one_visitor = np.random.choice(['y', 'n'], size=1, p=[0.1, 0.9])
print(one_visitor)                                                  RESULT: Most of the time running the script gave ['n']. Happened one time to appear as ['y'].
  6. Now, create a new list named simulated_monthly_visitors, which contains the randomly-generated outcomes for 500 visitors to Live-it-LIVE.com (still with a 10% chance of a purchase). 
Print simulated_monthly_visitors out. Do you see any visitors in this list who made a purchase?
//
simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
print(simulated_monthly_visitors)                                   RESULT: Small amount, but there are some ['y']-es.
                                                                    ... 'n' 'n' 'n' 'n' 'n' 'n' 'y' 'n' 'n' 'n' 'n' 'y' 'n' 'n' 'n' 'n' 'n' 'n'
                                                                    'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'y' 'n'
                                                                    'n' 'y' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'y' 'n' 'n' 'n' 'n' 'n' 'n'
                                                                    'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'n' 'y']

                                      SIMULATING THE NULL DISTRIBUTION I
GIVEN:
import numpy as np
import pandas as pd
monthly_report = pd.read_csv('monthly_report.csv')
#simulate 500 visitors:
simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  7. In script.py, you’ll see the code we used in the previous exercise to generate simulated_monthly_visitors, a list of 500 simulated outcomes, 'y' (with probability 0.1) or 'n', 
indicating whether each imaginary site visitor made a purchase. Add a line of code to calculate the number of those simulated visitors who made a purchase. Save the result as num_purchased 
and print it out.
//
simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
num_purchased = np.sum(simulated_monthly_visitors == 'y')
print(num_purchased)                                                RESULT: 57 (Randomnly generted sample example, other times it was 53, 47 and etc.)
  8. Inspect the value of num_purchased from the previous instruction. Is it close to 50 (which is what we would expect for a purchase probability of 10%)? Less than? Greater than? 
Now try pressing “Run” a few more times and see what other values of num_purchased you observe. What’s the farthest number from 50 that you observe after pressing “Run” 5 times?
//
Pressed.                                                            RESULT: The farthest value was 40. 10 less than an expected value of 50 (as 10% purchase expectation)

                                      SIMULATING THE NULL DISTRIBUTION II
GIVEN:
import numpy as np
import pandas as pd
null_outcomes = []
  9. Now let’s ask the same question with regards to purchases: if we run an experiment where we simulate a sample of 500 visitors, each with a 10% chance of making a purchase, and record 
the number of purchases for that imaginary sample — then repeat that experiment a bunch of times — what are the minimum and maximum number of purchases that we’ll observe by random chance?
The solution code from the last exercise is already saved for you in script.py commented out. This is the code to randomly sample 500 visitors who each have a 10% chance of making 
a purchase, then save the actual number who made a purchase as num_purchased. Use a for-loop to repeat this process 10000 times. Each time, append the number of simulated visitors who made 
a purchase to the list null_outcomes (which has also been initialized for you in script.py).
//
for i in range(10000):
  simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  num_purchased = np.sum(simulated_monthly_visitors == 'y')
  null_outcomes.append(num_purchased)
print(null_outcomes)                                                RESULT: 
                                                                    ... 63, 52, 43, 44, 47, 47, 44, 67, 36, 55, 43, 38, 42, 62, 50, 33, 53, 
                                                                    44, 49, 52, 40, 49, 46, 42, 54, 47, 53, 48, 52, 51, 46, 43, 59, 55, 
                                                                    51, 58, 44, 49, 51, 44, 43, 49, 52, 38, 52, 42, 43, 47, 46, 43, 47, 
                                                                    46, 50, 56, 40, 42, 46, 36, 46, 48, 38, 57, 40, 48, 49, 36, 46, 44, 
                                                                    46, 40, 52, 52, 44, 62, 45, 44, 51, 46, 50, 47, 46, 51]
  10. Outside of your loop, save the minimum and maximum values in null_outcomes as null_min and null_max respectively, then print them out. How much does the number of purchases seem 
to be varying by random chance? Run your code a couple of times to see how variable these numbers are.
//
null_min = np.min(null_outcomes)
print(null_min)                                                     RESULT: 26
null_max = np.max(null_outcomes)
print(null_max)                                                     RESULT: 80

                                      INSPECTING THE NULL DISTRIBUTION
GIVEN:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import codecademylib3
null_outcomes = []
for i in range(10000):
  simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  num_purchased = np.sum(simulated_monthly_visitors == 'y')
  null_outcomes.append(num_purchased)
#plot the histogram here:
plt.show()
  11. The code from the previous exercise is provided for you in script.py. The list null_outcomes contains numbers of purchases simulated under the null hypothesis. Add code to plot 
a histogram of null_outcomes and inspect the plot. What range of values occurs most frequently? Note that, because we are using simulation, if you press “Run” a few times, the histogram 
will change slightly each time — but the basic shape and range covered on the x-axis will stay the same.
//
plt.hist(null_outcomes)
  12. In the month we’re investigating, we calculated that there were 41 purchases. Add a vertical line to your histogram at 41. Make this line red using color = 'r' so that you can see it.
Where does 41 fall in this distribution? Is it relatively likely or unlikely?
//
plt.axvline(41, color = 'r')
plt.show()

                                      CONFICDENCE INTERVALS
GIVEN:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import codecademylib3
null_outcomes = []
for i in range(10000):
  simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  num_purchased = np.sum(simulated_monthly_visitors == 'y')
  null_outcomes.append(num_purchased)
  13. The code to generate null_outcomes has been provided for you. Calculate an interval covering the middle 90% of the values in null_outcomes. Save the output in a variable named 
null_90CI and print it out. Is the observed value of 41 purchases inside or outside this interval?
//
null_90CI = np.percentile(null_outcomes, [5.0,95.0])
print(null_90CI)                                                     RESULT: [39. 61.] The observed value of 41 purchase are within 90% of the data of implemented purchases. 
                                                                     Means it is a very likely amount of purchases to be made.

                                      CALCULATING A ONE-SIDED P-VALUE
GIVEN:
import numpy as np
import pandas as pd
null_outcomes = []
for i in range(10000):
  simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  num_purchased = np.sum(simulated_monthly_visitors == 'y')
  null_outcomes.append(num_purchased)
  14. The code you wrote to generate null_outcomes is available to you in script.py. Use null_outcomes to estimate the p-value for a binomial hypothesis test with the following null and 
alternative hypotheses:
Null: the probability of a purchase was 10%
Alternative: the probability of a purchase rate was LESS THAN 10%
In other words, calculate the proportion of values in null_outcomes that are less than or equal to 41 (the observed number of purchases that we calculated earlier). Save this number 
as a variable named p_value and print it out. Try pressing “Run” a few times; You should see slightly different values of p_value each time. What do you think the true probability is?
//
null_outcomes = np.array(null_outcomes)
p_value = np.sum(null_outcomes <= 41)/len(null_outcomes)
print(p_value)                                                       RESULT: 0.1045

                                      CALCULATING A TWO-SIDED P-VALUE
GIVEN:
import numpy as np
import pandas as pd
null_outcomes = []
for i in range(10000):
  simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[0.1, 0.9])
  num_purchased = np.sum(simulated_monthly_visitors == 'y')
  null_outcomes.append(num_purchased)
  15. The code you wrote to generate null_outcomes is available to you in script.py. Use null_outcomes to calculate the p-value for a two-sided test (alternative hypothesis is that 
the purchase probability was DIFFERENT FROM 10%). Remember that, if the purchase rate is 10%, we expect 50 of the 500 visitors to make a purchase. In other words, calculate the proportion 
of values in null_outcomes that are less than or equal to 41 (the number of purchases we observed in our sample, which is 9 fewer than 50) OR greater than or equal to 59 (which is 
9 purchases more than 50). Save this number as a variable named p_value and print it out. Again, try pressing run a few times to observe a few different estimates of p_value. What do 
you think the true p-value is for this test?
//
null_outcomes = np.array(null_outcomes)
p_value = np.sum((null_outcomes <= 41) | (null_outcomes >= 59))/len(null_outcomes)
print(p_value)                                                       RESULT: 0.2138

                                      WRITING A BINOMIAL TEST FUNCTION
GIVEN:
import numpy as np
import pandas as pd
from scipy.stats import binom_test
def simulation_binomial_test():
  #initialize null_outcomes
  null_outcomes = []
  #generate the simulated null distribution
  for i in range(10000):
    simulated_monthly_visitors = np.random.choice(['y', 'n'], size=500, p=[.1, .9])
    num_purchased = np.sum(simulated_monthly_visitors == 'y')
    null_outcomes.append(num_purchased)
  #calculate a 1-sided p-value
  null_outcomes = np.array(null_outcomes)
  p_value = np.sum(null_outcomes <= 41)/len(null_outcomes) 
  #return the p-value
  return p_value
  16. The simulation_binomial_test() function has been outlined for you in script.py. Add the following parameters to the function (in this order):
observed_successes (the observed sample statistic, eg., 41 purchases)
n (the sample size, eg., 500 visitors)
p (the null probability of success, eg., 0.10)
//
"def simulation_binomial_test(observed_successes, n, p):"
  17. Next, edit the simulation_binomial_test() function to remove all of the hard-coded values (eg., 500, 0.1, 0.9, and 41) so that the proper parameters are used in each calculation.
//
def simulation_binomial_test(observed_successes, n, p):
  #initialize null_outcomes
  null_outcomes = []
  #generate the simulated null distribution
  for i in range(10000):
    simulated_monthly_visitors = np.random.choice(['y', 'n'], size=n, p=[p, 1-p])
    num_purchased = np.sum(simulated_monthly_visitors == 'y')
    null_outcomes.append(num_purchased)
  #calculate a 1-sided p-value
  null_outcomes = np.array(null_outcomes)
  p_value = np.sum(null_outcomes <= observed_successes)/len(null_outcomes)   
  #return the p-value
  return p_value
  18. Uncomment the code at the bottom of script.py to test out your function and compare the results to the SciPy binom_test() function. Do you get similar answers?
//
#Test your function below by uncommenting the code below. You should see that your simulation function gives you a very similar answer to the binom_test function from scipy:
p_value1 = simulation_binomial_test(45, 500, .1)
print("simulation p-value: ", p_value1)                               RESULT: simulation p-value:  0.2585
p_value2 = binom_test(45, 500, .1, alternative = 'less')
print("binom_test p-value: ", p_value2)                               RESULT: binom_test p-value:  0.25468926056232155

                                      BINOMIAL TESTING WITH SciPy
  19. Use the binom_test function to run the same binomial test that you just simulated: A two-sided test for whether the observed 41 purchases among 500 visitors to Live-it-LIVE.com is 
far enough from the expected 10% purchase rate to convince you that the purchase rate was different from expectation this week. Save the p-value as p_value_2sided and print it out. 
Is this p-value similar to what you calculated via simulation (approximately 0.2)?
//
p_value_2sided = binom_test(41, n=500, p=0.1)
print(p_value_2sided)                                                 RESULT: 0.20456397700678308
  20. Run the same hypothesis test as in step 1, but now as a one-sided test where the alternative hypothesis is that the probability of a visitor making a purchase was less than 10% (0.1).
Save the p-value as p_value_1sided and print it out. Is this p-value similar to what you calculated via simulation (approximately 0.1)?
//
p_value_1sided = binom_test(41, n=500, p=0.1, alternative = 'less')
print(p_value_1sided)

                                      REVIEW
GIVEN:
import numpy as np
import pandas as pd
from scipy.stats import binom_test
def simulation_binomial_test(observed_successes, n, p):
  #initialize null_outcomes
  null_outcomes = []  
  #generate the simulated null distribution
  for i in range(10000):
    simulated_monthly_visitors = np.random.choice(['y', 'n'], size=n, p=[p, 1-p])
    num_purchased = np.sum(simulated_monthly_visitors == 'y')
    null_outcomes.append(num_purchased)
  #calculate a 1-sided p-value
  null_outcomes = np.array(null_outcomes)
  p_value = np.sum(null_outcomes <= observed_successes)/len(null_outcomes)   
  #return the p-value
  return p_value
  1. As a challenge, see if you can re-write the simulation-based binomial test function so that it has an input named alternative_hypothesis that can be equal to 'less', 'not_equal', 
or 'greater'. Then change the function so that it performs the appropriate one- or two-sided test for the alternative hypothesis provided. 
//
def simulation_binomial_test(observed_successes, n, p, alternative_hypothesis):
  #initialize null_outcomes
  null_outcomes = []
  #generate the simulated null distribution
  for i in range(10000):
    simulated_monthly_visitors = np.random.choice(['y', 'n'], size=n, p=[p, 1-p])
    num_purchased = np.sum(simulated_monthly_visitors == 'y')
    null_outcomes.append(num_purchased)
  null_outcomes = np.array(null_outcomes)
  if alternative_hypothesis == 'less':
    p_value = np.sum(null_outcomes <= observed_successes)/len(null_outcomes) 
  elif alternative_hypothesis == 'greater':
    p_value = np.sum(null_outcomes >= observed_successes)/len(null_outcomes)
  else:
    difference = np.abs(p*n - observed_successes)
    upper = p*n + difference
    lower = p*n - difference
    p_value = np.sum((null_outcomes >= upper) | (null_outcomes <= lower))/len(null_outcomes)  
  #return the p-value
  return p_value
