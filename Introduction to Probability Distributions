                                      RANDOMN VARIABLES
  1. Run the given code as-is to simulate rolling a die five times.
//
import numpy as np
# create 6 sided "die"
die_6 = range(1, 7)
# set number of rolls
num_rolls = 5
# roll the "die" the set amount of times
results_1 = np.random.choice(die_6, size = num_rolls, replace = True)
print(results_1)                                                RESULT:
                                                               [1 4 5 2 6]
  2. Change the value of num_rolls so that results_1 has the results of rolling a die ten times.
//
import numpy as np
# create 6 sided "die"
die_6 = range(1, 7)
# set number of rolls
num_rolls = 10
# roll the "die" the set amount of times
results_1 = np.random.choice(die_6, size = num_rolls, replace = True)
print(results_1)                                                RESULT:
                                                               [1 4 5 2 1 3 4 5 5 5]
  3. Using the range() function, create a 12-sided die called die_12. Use similar logic as die_6.
//
die_12 = range(1, 13)
  4. Simulate rolling die_12 ten times, and save the rolls as results_2. Use the np.random.choice() function to simulate the rolls, and be sure to print out your results!
//
results_2 = np.random.choice(die_12, size = num_rolls, replace = True)
print(results_2)                                                RESULT:
                                                              [ 9  6  1 12  1  5  2 10  8  4]

                                      DISCRETE AND CONTINUOUS RANDOM VARIABLES
  5. Suppose you have a random variable that represents the time it takes a randomly selected person to run a mile. Is this variable discrete or continuous? In script.py, set the value 
of mile_time to 'discrete' or 'continuous' to answer.
//
mile_time = 'continuous'
candy = 'fill your answer here'
  6. Suppose you have a random variable that represents the individual pieces of candy a randomly selected child receives on a candy-giving holiday. Is this variable discrete or continuous? 
In script.py, set the value of candy to 'discrete' or 'continuous' to answer.
//
mile_time = 'continuous'
candy = 'discrete'

                                      PROBABILITY MASS FUNCTIONS
                                      CALCULATING PROBABILITIES USING PYTHON
  7. Change the scaffolded code to calculate the probability of observing 3 heads in 10 fair coin flips. Save this probability to prob_1. Update x and n in script.py accordingly.
GIVEN:
import scipy.stats as stats
# value of interest
# change this
x = 1
# sample size
# change this
n = 5
# calculate probability
prob_1 = stats.binom.pmf(x, n, 0.5)
print(prob_1)
## Question 2
#prob_2 = 
//
import scipy.stats as stats
x = 3
n = 10
prob_1 = stats.binom.pmf(x, n, 0.5)
print(prob_1)                                    RESULT: 0.11718750000000014
  8. Using the same logic in question 1, calculate prob_2 to be the probability of observing 7 heads out of 20 fair coin flips. However, this time, directly input values into the 
stats.binom.pmf() method. Then print prob_2.
//
prob_2 = stats.binom.pmf(7, 20, 0.5)
print(prob_2)                                    RESULT: 0.07392883300781268

                                      PROBABILITY MASS FUNCTION OVER A RANGE USING PYTHON
GIVEN:
import scipy.stats as stats
  9. Uncomment prob_1 and set it equal to the probability of observing between 4 to 6 heads from 10 coin flips. Be sure to use stats.binom.pmf(). Be sure to uncomment the print 
statement below it as well.
//
prob_1 = stats.binom.pmf(4, n=10, p=0.5) + stats.binom.pmf(5, n=10, p=0.5) + stats.binom.pmf(6, n=10, p=0.5)
print(prob_1)                                    RESULT: 0.6562500000000007
  10. Use the 1 minus the sum of some values of stats.binom.pmf() method to set prob_2 to the probability of observing more than 2 heads from 10 coin flips.
//
prob_2 = 1 - (stats.binom.pmf(0, n=10, p=0.5) + stats.binom.pmf(1, n=10, p=0.5) + stats.binom.pmf(2, n=10, p=0.5))
print(prob_2)                                    RESULT: 0.9453125

                                      USING THE CULMULATIVE DISTRIBUTION FUNCTION IN PYTHON
  11. Uncomment and assign the variable prob_1 to the probability of observing 3 or fewer heads from 10 fair coin flips using the cumulative distribution function. Then print prob_1.
Use the binom.cdf() method from the scipy.stats library.
//
prob_1 = stats.binom.cdf(3, n=10, p=0.5)
print(prob_1)                                    RESULT: 0.17187499999999994
  12. Uncomment and run the given code for the probability mass function below the following comment: # compare to pmf code (checkpoint 2). See how the calculation using the CDF is simpler?
//
print(stats.binom.pmf(0, n=10, p=.5) + stats.binom.pmf(1, n=10, p=.5) + stats.binom.pmf(2, n=10, p=.5) + stats.binom.pmf(3, n=10, p=.5))   RESULT: 0.17187499999999994
  13. Uncomment prob_2 and assign the variable to be the probability of observing more than 5 heads from 10 fair coin flips. Then print prob_2. Use the binom.cdf() method from the 
scipy.stats library.
//
prob_2 = 1 - (stats.binom.cdf(5, n=10, p=0.5))
print(prob_2)                                    RESULT: 0.3769531250000001
  14. Assign the object prob_3 the probability of observing between 2 and 5 heads from 10 fair coin flips. Then print prob_3
//
prob_3 = stats.binom.cdf(5, n=10, p=0.5) - stats.binom.cdf(1, n=10, p=0.5)
print(prob_3)                                    RESULT: 0.6123046874999999
  15. Uncomment and run the code for the probability mass function at the bottom of script.py. See how this calculation is simpler?
//
print(stats.binom.pmf(2, n=10, p=.5) + stats.binom.pmf(3, n=10, p=.5) + stats.binom.pmf(4, n=10, p=.5) + stats.binom.pmf(5, n=10, p=.5))   RESULT: 0.6123046875000006

                                      PROBABILITY DENSITY FUNCTION
  16. Following the same Normal(167.64, 8) distribution, assign the variable prob the probability that a randomly chosen woman is less than 175 cm tall. You should use the stats.norm.cdf() 
method. Be sure to print prob.
//
import scipy.stats as stats
prob = stats.norm.cdf(175, 167.64, 8)
print(prob)                                    RESULT: 0.8212136203856288

